%% Notch Filter

tic;
%% Inititalization
file='../data/image_low_frequency_noise.mat';
l=load (file);
img1=l.Z;
figure('name','Original Image');
imshow(img1,[min(img1(:)),max(img1(:))]),colormap (gray);
title('\fontsize{10}{\color{red}Original Image: Barbara}');
o1 = get(gca, 'Position');
colorbar(),set(gca, 'Position', o1);
axis tight,axis on;

%figure('name','Original Image1');
%imagesc(img),daspect([1,1,1]),colormap(cmGray256),colorbar();

%% Zero padding
img=img1;
[row,col]=size(img);
imgPad=padarray(img,[ceil(row/2),ceil(col/2)],min(img(:)),'both');
figure('name','Padded Image1');
imshow(imgPad,[min(img(:)),max(img(:))]),colormap (gray);
title('\fontsize{10}{\color{red}Barbara: Padded image}');
axis tight,axis on;
impixelinfo;

%% Finding the Fourier Transform of the Image
fShiftImg = fftshift(fft2(imgPad));
absfimg = log(abs(fShiftImg)+1);
figure('name','Fourier Transform');
imshow(absfimg,[min(absfimg(:)) max(absfimg(:))]),colormap (gray); colorbar;
title('\fontsize{10}{\color{magenta}FFT of log(abs(fshiftimg)+1)}');
axis tight,axis on;
impixelinfo;

%% Desiging Notch filter
[row,col]=size(fShiftImg);
H=ones(row,col);
radius=5;
center={[237,247],[278,268]};
for u=1:row
    for v=1:col
        for i=1:size(center,2);
            ui=center{i}(1);vi=center{i}(2);
            distance=(u-ui)^2 + (v-vi)^2;
            if  distance <= radius^2
                H(u,v)=0;
            end
        end
    end
end
notchFilterH=H;
figure('name','Filter');
imshow(notchFilterH,[min(notchFilterH(:)) max(notchFilterH(:))]); colorbar;
title('\fontsize{10}{\color{magenta} Notch Filter)}');
axis tight,axis on;
impixelinfo;

%% Appliying Notch Filter on Image

G=fShiftImg.*notchFilterH;
ifimg=ifft2(ifftshift(G));
%%
figure('name','Notch Image');
% taking center portion
img=abcifimg(128:383,128:383);
imshow(img,[min(img(:)),max(img(:))]),daspect([1,1,1]);
title('\fontsize{10}{\color{magenta}Barbara with Notch applied}');
o1 = get(gca, 'Position');
colorbar(),set(gca, 'Position', o1);
axis tight,axis on;

